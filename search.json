[{"title":"串口通信的verilog实现","url":"/2024/03/16/串口通信的verilog实现/","content":"最近报了个小项目，跟FPGA相关的，想着也很久没写verilog了，写个串口通信状态机练手。  \n\n串口通信，玩过单片机的基本上都知道，但是玩单片机对原理上没有太多要求，所以我在写verilog实现的时候我才知道我对Uart一无所知，真是惭愧。  \n\n我这里写的是异步通信的实现，如有不当，多多指教。话不多说，先上代码。  \n\t\n\t/2024-3-12 千sir\n\t//串口通信接收的verilog实现\n\t//首先定义总模块\n\tmodule uart_rx(\n\tinput clk,//时钟\n\tinput rst,//使能端口\n\tinput data_rx,//数据接收端\n\toutput reg data_tx//数据发送端\n\t );\n\treg [7:0]serial_data;//设置数据寄存器\n\treg [15:0] clk_cnt;//设置计数器\n\treg [2:0] state;//设置状态寄存器\n\treg rx_delay;//rx的延时信号\n\treg [3:0] bit_cnt;//比特计数\n\tparameter clock_fre=50000000;//设置系统时钟为50M\n\tparameter biterate =115200;//设置波特率为115200\n\tparameter cnt_period=clock_fre/biterate;//计数周期\n\t//以下是接收过程\n\talways@(posedge clk or negedge rst)begin\n\tif(!rst)begin\n\tstate<=0;clk_cnt<=0;serial_data<=0;rx_delay<=0;data_tx<=1;//复位端低电平使能后，除串口发送端之外全部清零，串口发送端置高电平\n\tend\n\telse begin\n\trx_delay<=data_rx;\n\tcase(state)\n    0://空闲状态\n    if(rx_delay&(~data_rx))begin\n    data_tx<=0;\n    state<=1;//转换到起始状态\n    end\n    else begin\n    data_tx<=1;\n    end\n    1://起始位\n    if(clk_cnt==cnt_period)begin//如果经过了一个接收周期\n    state<=2;//进入接收状态\n    end\n    else begin \n    clk_cnt<=clk_cnt+1;\n    end\n    2://接收位\n    if(clk_cnt==cnt_period)begin\n    if(bit_cnt==7)begin//接收八个比特数据后转换到结束位\n    state<=3;\n    end\n    else begin\n    serial_data[bit_cnt]=data_rx;//给数据寄存器赋值\n    clk_cnt<=0;//时间计数归零\n    bit_cnt=bit_cnt+1;//比特数加一\n    end\n    end\n    else begin\n    clk_cnt=clk_cnt+1;\n    end\n    3://结束位\n    if(~rx_delay&data_rx==1)begin\n    state<=0;//检测到高电平就回到空闲状态\n    end\n    else begin \n    clk_cnt<=0;\n    end\n    default:begin//case配套，避免产生锁存器\n    state<=0;\n    end\n\tendcase\n\tend\n\tend\n\tendmodule  \n\n刚开始写的时候连波特率都需要去百度了，一年单片机裸机跟没做过一样，下面简要介绍一下两个专业名词：\n\n\t波特率：每秒钟发送的比特数，一般是9600或者115200\n\t系统时钟：系统每秒钟响应的周期数。它与波特率的商就是发送一个比特需要的时钟周期数。\n\n其实异步通信是有起始位、数据位、校验位和终止位的，但是我懒得写校验位了（doge），一般都默认无校验的。\n\n以上代码是接收模块。至于发送模块，写来也差不多，不加赘述。\n\n下面写个简单的testbench\n\n\t//2024-3-14 千sir\n\t//串口通信状态机的testbench\n\t`timescale 1ns/1ps\n\t//定义整体模块\n\tmodule uart_rx_tb;\n\treg [7:0] serial;\n\treg clk,rst,data_rx;\n\treg [15:0] clk_cnt;//设置计数器\n\tparameter clock_fre=50000000;//设置系统时钟为50M\n\tparameter biterate =115200;//设置波特率为115200\n\tparameter cnt_period=clock_fre/biterate;//计数周期\n\treg [3:0] bite_cnt;//比特计数\n\tuart_rx u_uart_rx(.clk(clk),.rst(rst),.data_rx(data_rx),.data_tx(tx));\n\tinitial begin//初始化\n\trst<=0;\n\tclk<=0;\n\tserial<=\"A\";\n\t#5000 $stop;\n\tend\n\tbegin \n\talways #2.5 clk=~clk;//时钟每2.5纳秒翻转一次，即频率为50M\n\talways@(posedge clk)begin\n\tdata_rx=0;\n\tif(clk_cnt==cnt_period)begin\n\tdata_rx<=serial[bite_cnt];\n\tbite_cnt<=bite_cnt+1;\n\tif(bite_cnt==7)begin\n\tdata_rx=1;\n\tend\n\tend\n\telse begin\n\tclk_cnt<=clk_cnt+1;\n\tend\n\tend\n\tend\n\tendmodule\n\n发送一个简单的“A”给系统，仿真结果正好是0100001，即65，在ASCII码表中代表\"A\".\n\n其实我觉得我的testbench写的挺奇怪的，不过先记录下来，等学精了再来改。（坐等打脸）\n\n\t","tags":["-FPGA"]},{"title":"《月亮与六便士》：理想主义者的自嗨","url":"/2024/03/13/《月亮与六便士》：理想主义者的自嗨/","content":"“满地都是六便士，只有他看见了月亮”。嗯，没错的，我正是被这么浪漫的评价吸引，才去拜读这本众人夸赞的传世经典，但是它无疑令我相当失望。  \n\n对于《月亮与六便士》，我实际上早有耳闻，最初的时候是高中语文课上同学讲书时推荐的，那时我时间成本上不允许我去读什么闲书，但是其在我心中一向是高端的存在。  \n\n近日来有些偷闲，于是去找来读了。昨天与同僚谈起这本书，我们的一致评价都是负面的。其实我原本是准备在这本书上找一些答案的，但很显然它是一本纯粹意义上的理想主义者的自嗨。  \n\n主人公完全没有道德，为所谓之艺术抛妻弃子，伤害朋友。最后还自相矛盾，又在一个小岛上与另一个女人结婚。文笔上没什么问题，并没有让人感到故作高深而不知所云，这确实已经远远超越了很多写手。但是我根本没办法理解它所要表达的价值观。而且，主人公的经历本身就非常抽象且远离现实，在我看来，这样的故事既不是对现实的提炼，也不具备对任何事物的赞扬和讽刺。总的来说，这本书没有任何意义，去读这样的一本书，还真的不如去多敲两行verilog。\n\n这样一本书常年霸占畅销书排行榜，并拥有很多忠实读者。我的评价是，这个现象本身就是对人们最大的讽刺。几乎所有的人都是为了附庸风雅而去歌颂和赞美这本书。据我猜测，这本书在问世之初应该是以其极端主义取胜的，当一个人做的事情与所有人都不一样的时候，他大概率就会成功，毛姆正是如此。先是通过一个极端的故事吸引人们的眼球使其该书名声大噪，再有所谓的理想主义者鼎力支持，这必然会使《月亮与六便士》保持在一个相对较高的位置。而且遗憾的是，观察者不愿意使这本书没落下去，时间不仅没有纠错，反而使书被神化。我一向不惮以最坏的恶意来推测人想要“装X”的心理的，正是有这样的心理，使得这本书的成功成为了对人们作秀心理的极大讽刺。  \n\n我作为一个现实主义者，对于理想主义一向是反感的。但是理想主义也有很多值得借鉴的观点，遗憾的是，《月亮与六便士》以其极端、自私、冷漠的价值观再一次为理想主义蒙上一层灰色。这样的书从出版开始，都是对理想主义最大亵渎，最终也沦为了一场规模宏大，影响庞甚的可悲自嗨。\n\n","tags":["-书评"]},{"title":"As The Beginning Of Everything","url":"/2024/03/10/As-The-Beginning-of-Everything/","content":"严格意义上讲，这是我的第一篇博客，正如题目所言，是一切之开端。  \n\t\n自上大学以来，我其实一直都缺少一个自言自语的地方。初中的时候我尚且没有那么多想法，而高中时又有好友屈尊就卑来做我的听众。而在大学，作为一个号称\"誓死效忠于精英主义\"的人，总是无端地去找人自说自话是不合适的。所以我在尝试了许多大众平台之后，决定自己搭个博客。  \n\n当然，观察者显然并不希望我如此顺利地获得一块“应许之地”，所以搭建这个个人博客的过程十分艰辛，我几乎在经历了所有可能经历的失败后才搭建起这个轻量级的博客，在此之前我对网页的很多东西其实非常不了解，在搭建博客过程中也算是管中窥豹了吧。  \n\n我经常在自己的文章称自己是“末流文笔”，但是我依旧热爱文字。所以你可以在主页上很容易地看见“sometimes code,sometimes literature\"(时而代码，时而文学)，这是我对自己的评价。作为一个未来的工程师，我对文字的情感并不会对代码少。同时我也认为我的文字是比较有力的，无论是论述、讽刺或是叙事。如果你对生活感到无力，随时欢迎你来参观。  \n\n我想大部分人是不会打开这个博客第二次的，这并没有什么关系。实话来讲，我其实不认为那些“一目十行”的现代人能在我的文章中获得什么。有很多的人习惯了看网文和口水话，失去了对文字的理解能力，这是很正常的事。在短视频兴盛的今天，文字早就成为等人修缮的破庙了。  \n\n当然，作为一个技术人员，我也会在自己的博客上分享一些自己觉得很有用的知识，并记录我的技术成长。作为一个软硬件都学的人，我所分享的文章自然是横跨多个领域的（或者过两年等我精专后就不会了）。  \n\n还有就是，博客自然要记录生活，还有回忆，这些我大抵都会谈到。  \n\n最后，欢迎你来到我的博客，希望你有所收获，祝你我都好运。  \n\n\n----------------------------------------------------------------------------------------——————甲辰年二月初一于广州\n","tags":["-议论"]}]